module Day17 where

import Prelude
import Control.Applicative
import Control.Monad.Extra hiding (anyM)
import Control.Monad.State.Strict
import Control.Monad.Loops hiding (whileM)
import Data.Bifunctor
import Data.Either
import Data.List
import Data.Function
import Data.Maybe
import qualified Data.Set as S
import Debug.Trace

import Test.QuickCheck

-- Constants

rock1 :: String
rock1 = "####\n"

rock2 :: String
rock2 = ".#.\n###\n.#.\n"

rock3 :: String
rock3 = "..#\n..#\n###\n"

rock4 :: String
rock4 = "#\n#\n#\n#\n"

rock5 :: String
rock5 = "##\n##\n"

--jetPattern = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"

width :: Integer
width = 7

parsed :: String -> [[Char]]
parsed = lines

-- | bounds of each rock
-- m - num rows
-- n - num cols
bounds :: [[Char]] -> (Int, Int)
bounds matrix = (length matrix, length $ head matrix)

data RockType = One|Two|Three|Four|Five
type Dist = Int
data Chamber = Chamber { chamber :: S.Set (Int, Int), pattern :: String } deriving Show

main :: IO ()
main = do
  print "Part 1"
  print $ height 0 2022
  let (mtpl, Chamber s2 p) = runState (mapM turn (parsed <$> take 6000 initialRocks)) initialChamber
      (f, s, t') = fromMaybe (0,0, -1) $ longestCycle mtpl
      t=t'+1
      cycleHeight1 = height 0 f
      cycleHeight2 = height t s
      cycleHeight = cycleHeight2 - cycleHeight1
      (d,r) = 1000000000000 `divMod` (s - f)
      answer = height 0 r + (d * cycleHeight)
  print "Part 2"
  print answer

-- | height of tower after i blocks,
-- with offset of k applied to yield starting block of j+k
height :: Int -> Int -> Int
height k i =
  let Chamber s _ = execState (forM_ (parsed <$> take i (revolveN k initialRocks)) turn) initialChamber
  in S.findMax $ S.map fst s

mapWithIndex :: (Num b1, Enum b1) => (a -> b1 -> b2) -> [a] -> [b2]
mapWithIndex f xs = zipWith f xs [0..]

longestCycle :: [([Bool], [[Char]])] -> Maybe (Int, Int, Int)
longestCycle moves = foldr ((<|>) . cycleWithVal moves) Nothing moves

cycleWithVal :: [([Bool], [[Char]])] -> ([Bool], [[Char]]) -> Maybe (Int, Int, Int)
cycleWithVal xs x =
  let res = filter (\(i,z) -> z == x) (zip [0..] xs)
      (i,(a,b)) = head res
      ds = differences (map fst res) in do
  guard $ length res > 3 && (maximum ds == minimum ds)
  return (i, fst $ head . tail $ res, fromMaybe (-1) $ elemIndex b (parsed <$> initialRocks))

differences :: [Int] -> [Int]
differences arr@(x:xs) = zipWith (flip (-)) arr xs

initialRocks :: [String]
initialRocks = cycle [rock1, rock2, rock3, rock4, rock5]

revolve :: [String] -> [String]
revolve xs = tail xs ++ [head xs]

revolveN :: Int -> [String] -> [String]
revolveN 0 xs = xs
revolveN i xs = revolveN (i-1) (revolve xs)

initialChamber :: Chamber
initialChamber = Chamber (S.fromList [(0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6)]) (intersperse '.' $ cycle jetPattern)

topRow :: S.Set (Int, Int) -> [Bool]
topRow s = let (_, yMax) = yBounds s in row yMax ++ row (yMax-1) ++ row (yMax -2)
   where
     row y = (\x -> S.member (y,x) s) <$> [0..6]

flatten :: [[Char]] -> [(Int, Int)]
flatten grid = [ (-m,n) | m <- [0..bm-1], n <- [0..bn-1],
                 grid !! m !! n == '#' ]
  where
    (bm,bn) = bounds grid

rock :: [[Char]] -> S.Set (Int, Int)
rock = S.fromList . flatten

xBounds :: S.Set (Int, Int) -> (Int, Int)
xBounds c = (S.findMin $ S.map snd c, S.findMax $ S.map snd c)

yBounds :: S.Set (Int, Int) -> (Int, Int)
yBounds c = (S.findMin $ S.map fst c, S.findMax $ S.map fst c)

shock :: Int -> Int -> S.Set (Int, Int) -> S.Set (Int, Int)
shock mOffset nOffset s = S.map (bimap (+mOffset) sideOffset) s
   where
     (mMin, mMax) = xBounds s
     sideOffset = if mMin == 0 && nOffset < 0 || mMax == 6 && nOffset > 0
                  then id
                  else (+nOffset)

start :: S.Set (Int, Int) -> [[Char]] -> S.Set (Int, Int)
start chamber grid =
   let mOffset = length grid + 3 + (fromMaybe 0 . S.lookupMax $ S.map fst chamber)
       nOffset = 2
       r = rock grid in
   shock mOffset nOffset r

-- shock according to jet signal
move :: S.Set (Int, Int) -> Char -> S.Set (Int, Int)
move s c = case c of
  '<' -> shock 0 (-1) s
  '>' -> shock 0 1 s
  '.' -> shock (-1) 0 s

check :: S.Set (Int, Int) -> S.Set (Int, Int) -> Maybe (S.Set (Int, Int))
check chamber s = if S.null $ S.intersection s chamber then Just s else Nothing

-- Example ----------------------------------
-- [(8,2),(8,3),(8,4),(9,4),(10,4)] '.'  Just
-- [(8,3),(8,4),(8,5),(9,5),(10,5)] '>'  Just
-- [(7,3),(7,4),(7,5),(8,5),(9,5)]  '.'  Just
-- [(7,2),(7,3),(7,4),(8,4),(9,4)]  '<'  Just
-- [(6,2),(6,3),(6,4),(7,4),(8,4)]  '.'  Just
-- [(6,1),(6,2),(6,3),(7,3),(8,3)]  '<'  Just
-- [(5,1),(5,2),(5,3),(6,3),(7,3)]  '.'  Just
-- [(5,0),(5,1),(5,2),(6,2),(7,2)]  '<'  Just
-- [(4,0),(4,1),(4,2),(5,2),(6,2)]  '.'  Just   >-------------------------  Right [(4,0),(4,1),(4,2),(5,2),(6,2)]
-- [(4,1),(4,2),(4,3),(5,3),(6,3)]  '>'  Nothing ** scratch this calc ** |  Right [(4,0),(4,1),(4,2),(5,2),(6,2)]
-- [(3,1),(3,2),(3,3),(4,3),(5,3)]  '.'  Nothing  <-- continue here  < --   Left  [(4,0),(4,1),(4,2),(5,2),(6,2)] -> Finish

-- | foldlM is a left to right monadic bind
-- so on foldlM f z0 [3,2,1] is something like
-- \z -> f z 3 >>= (\z -> (f z 2 >>= (\z -> f z 1 >>= return))) z0
-- =>  f z0 3 >= (\z -> (f z 2 >>= (\z -> f z 1 >>= return)))
-- =>  f (f z0 3) 2 >>= (\z -> f z 1 >>= return)))
-- =>  f (f (f z0 3) 2) 1 >>= return
-- =~  (f (f z0 3) 2) `f` 1
-- =~  ((f z0 3) `f` 2) `f` 1
-- =~  (((z0 `f` 3) `f` 2) `f` 1)
-- There is no thunk of f's building up though,
-- at each bind there is a pattern match as per the
-- instance definition below, so the evaluation of the first
-- f z0 3 is forced, before proceeding to the next line.
-- That is probably why there is no strict version called foldlM'
-- The strictness/laziness of the fold is perhaps up to
-- what monad instance you use?
--
-- The binds fold from the right, however it ends up as
-- a left associating application of f
-- The binds are lazily evaluated on the RHS, as monadic binds
-- can terminate early. So it is safe to use it on our infinite @jet
-- list here, as all processing stops after the Left short circuit
-- here is the Either bind, so you can see it is lazy in the RHS argument:
--
-- instance Monad (Either e) where
--    Left  l >>= _ = Left l
--    Right r >>= k = k r
--
turn :: [[Char]] -> State Chamber ([Bool], [[Char]])
turn grid = do
  Chamber chamber jet <- get
  -- get rock start value TL, return rock set
  let rockSet = start chamber grid
      (moves,i) = fromLeft (rockSet,0) $ foldM f (rockSet, 0) jet
      f (b,i) a = case check chamber (move b a) of
        Nothing -> if a == '.' then Left (b, i+1) else Right (b, i+1) --skip l/right move
        Just m -> Right (move b a, i+1)
      chamber' = chamber `S.union` moves
      jet' = drop i jet
  put $ Chamber chamber' jet'
  pure (topRow chamber', grid)

-- Tests -------
propRockBounds :: Bool
propRockBounds = (bounds . parsed <$> [rock1, rock2, rock3, rock4, rock5]) == [(1, 4), (3,3), (3,3), (4,1), (2,2)]

propFirstFew :: Bool
propFirstFew =  let Chamber s _ = execState (forM_ (parsed <$> take 10 (cycle [rock1, rock2, rock3, rock4, rock5])) turn) initialChamber in s == S.fromList [(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(1,2),(1,3),(1,4),(1,5),(2,3),(3,2),(3,3),(3,4),(4,0),(4,1),(4,2),(4,3),(4,4),(5,2),(5,4),(6,2),(6,4),(7,4),(8,4),(8,5),(9,4),(9,5),(10,1),(10,2),(10,3),(10,4),(11,2),(12,1),(12,2),(12,3),(13,0),(13,1),(13,2),(13,3),(13,4),(13,5),(14,0), (14,1), (14,4),(14,5),(15,4),(15,5),(16,4),(17,4)]

jetPattern = ">>>><<>><<>>><>>>><<<<>>>><<<<>>><<<>><<<<>><<<<>><<<>><>>><<<>><<<<>>><<>><<<>>>><<<<>>><<<>><<<>><<>><<<<>>><<<<><<><<<>>><<<<><<>>>><<>>>><<<<><<<<><<<<>>><<<>><<>>><><<<>>>><<>><<>><<<<>><<>><<><<>>>><<>>><<>>>><<<<>>><>>>><<<>>><<<<>>><>>><<>>>><<<<>><<<><<<<>>>><>><<<<>><<<><>><><<<><>><<<<>>>><<>>>><<>><<<>>>><<<>><<>><<>>>><>>><<<>><<>>><>>>><<><>>>><<<>>><>>>><>>><<<<><<<<><>>>><><<>>>><<<<><<<<><<>><<<>>><<<><<>>><<<><<<>>>><>>>><<<<>>>><>><<>>>><<<>><<<>>><><<<>><<>>>><<<<>>>><<><<><<>>><><<>>><>>>><<><<<><<<>>><<<>><<<>>>><<>>><<<><>>>><<<>>>><<<>><<<<>><>>>><<<<><<><<<<>>><>>>><>><<<<>><<>>>><<<<>>><<<><<<<>>>><<<><<<<>>><><<>>>><<<<>>><<>><><<>>>><<<>>>><<<><>>><<<><<<<>><<<<><<<<>><<<<>>><<>>><<>>>><<<<>><<<<><>>>><<<<>><<<>><<<><<><<<<>>>><<<<>>><><<<>>><><<<>>>><<<>><<<>>>><<<>><><>><<<>><>>>><>>><<><<>><<>>><<<<>><<<>>>><<<>>><<<<>>><>>><><>>>><<<>>>><<<>>>><<<>>>><<<>>>><<><<>>>><<<>><>>>><<<>>>><<>>><<>>><>>>><<>><<<>><<<>>>><><<<<><>>><<><<<>>>><<>>>><><<><<>>><<<<><<<<>><>>>><><<<>>>><<<>>>><><<><<>><><<>>>><<<<>>><>>>><<<><<>><>><<>>><<<<>>><>>>><<<<>><<><<<<>><<>>><<<>><<><>>><<<<>>>><<>>>><<<<>>><<<>>><>><<<<><<>>><>>>><<<<><<<>>>><<<>>>><<>>><>><<<<>><<<<>>>><<<>><<<<><><<<<><<<><<<<>><>>><<<<>><<>>>><<>><<<><<<<>><<><<>>><<<<>>><<<>>>><<>>><>><<<>><<<<>>>><<>>><<>>>><<>><><<>><<<>>>><<<>>>><<>><<<><<<>>>><<<<>><<<>>>><<<>>>><>><<<>><<>>><<><<<<>>>><<<>>>><<<<>><>>>><<>>><<<<><>>>><<<<><>>>><<<>>><<<><>><<<<>>><<<>>><<><<<><<>><<<<>>>><<<<><<<><<<<>><<<<>><><<><<<<>><>><>>><<<<>>>><<><<<>>><<>>>><<>>>><<<<><<>>>><<>>><>>><>>>><<<>>><>>>><<<<><<<<>>>><<<<>>><<>>><<<<><<<><<>>><<><<>><<<>><<<>><<<><<<<>>><<>>>><<<>>>><<>>>><>>>><<<<>>>><<>>>><<<<>><<>>>><<>><><<>>>><>>>><<>>><<>>>><<>>><<><<<>><<>><<<><<<><><>>>><><>>><<<>>><<>><<>><>>><>><>><<>>>><<<<>><><>>><<<<>>><>><<>>><<<>><<>>>><<<<>>><<<><<>>><>>>><<<><<<>><><<<>>><<<>>><>><<<<>>><<<<>><>><><>>><<>><><<>>><><><>>>><>>>><<>><<<><<<>><<<<>><>>><<<<>><<<>><>>>><<<<>>><<<<><<><>><<<><<<>>>><<<<>>><>>>><>>>><<<<><<><>>><<<<>><<<>><>><<<>>>><<<<>>>><<<>>>><<>><<<>><>>><<><<<<>><<<<><>>>><<>><<<>>>><<<<>>>><<><><><><<<<>><<<>>>><<>>>><<>>>><>>>><>>><>>><<<<>><<<>><>>><><>><<<<>>>><<<><<<<>><><<><><<<>>><<<>><<<>>><><<<<>><<<<><>><><<<><<<>>><><<><<<<><<>><<<>>><<<>><<>>><<<<>>>><>>><<<>><<><>>><<<>>>><<<<>><<<>>><<<<>>>><<>>><<<>>><<><<<<>>>><>>>><<>><<<>><<<<><<<>>>><<>>>><<>><<>><<<>>><><<<<>>>><<<<>>>><><<>><<>>><<<<>>><<><<><<><>>><<>>><<<>>><<<>>>><>>><>><<>>>><>>><>><<><<<<>><<<><<<>>>><<>>><<>>><><<<>><<<>>><>><<><<>>><<<>><<>>><><><<><<<>>><<<<>>>><>>>><<<<>><>>>><<<>>><<>>>><<>>>><>>><<<<>><<<<>><<<<>>>><<<<>>>><<<<>><<<<>><<<>>>><><<<>>><<>>><<<>>><<<<>>><<<<>>><<<<><<>>>><<>>><><<<><<<><><>><>><<>>>><<<<>>><>><<<>><<<<>>><<<><<<>><<<<>>>><<<<>><<<<><<<>><<><>>><<<>>><><<>>>><<>><<<>>>><<<>>>><<>>>><<<>>>><<<<>><<><<<<>>><<<<>>>><<<>>>><>>><<<<>>>><<<<>>><<>>>><<<>>>><>>><<><<<<>>>><<><<<>>><<>><<<><<><<<<>>>><<<<><<<>><>><<<>>><>>>><<<<>>><<><<<>>><<>>>><>>><<>>>><>><>><<<<>>>><<<<>>><<<><<<><<<<>>>><<><<<<>>>><<<><<>><<<<>>>><<<<><<<<>><<>>>><<<>><<><<<>><<<>><<<><>><<>><<<>>>><<>>><>>>><<<<>>>><<>>><<<>>><<<<><<>>>><<<<>>>><>><<>><<><<<>>><<>>>><<<><<<<>><<<>>>><<<<>><><<>>><<><<><>>><<<><<>><<<>>><<>>><<<>>>><>>><<<><>>>><>>>><<<>><>>>><<<<><<<>><<>>>><<<>>>><>><<><<<<>>><<<>><<<>><><<>><<><<<<>><>><<<<>>>><<>>>><<<<>>><<<>><>>>><>>><<<<>>><<<>><<<<>><<>>><<<<><<<<><>>><>>>><>><<>><<<>>>><<<<>><<<<><<<<>>>><>>><<>><>><<<<>>><<<>>><<<><>>>><<<><<<><<>><<<<>>>><<<<><<<<>>><><<<<>><<<<>>><<<<><<><<<><>>><<<<>>>><<<>>><<<<>>>><<<<>><<<>><<<<>><<<><<<<>>>><<<<><<><<<<>>>><<>>><<>><<><>>>><<<>>><>><<<><<<<>>>><>>>><<<>>><<<<>>>><>>>><<<<>>>><<<<>><<<<><<><<><><<<<>>><<<<>>>><<<<>><<<>>><>>><<<>>>><<<<>><<<<>>>><<<<><<>>><><<<<>><<><<<>>>><><<<<>><<<<>>><<<>><<>>>><<<><<<<>>><<>>><<>>><>><<>>>><<>>><<<>>><<<<>>><<<<><<>>><<<><<<>>>><<>><<<>>><<<<>>>><<<>>><<<>>><<<><<<<><>>>><>>><<>>><>>>><<<<><<<><<<<>>>><<<<>>><>>>><>><<<<>>><<<<>><<<>><<>><<<<>>><<<<>>><<<<>><<><><<>><<<<>><<<><>>>><>><<>>><><<>><>>>><><<<>>><<<><<<<>>><<><<<>>><<><>>><<<<>><<<>>>><<<>>>><<<>>><<<<>><<<<>>><<<<><<<><<>><>>><<<><>>><>>>><><<>>><>>>><<<<>>><<<<>>><<<>><>><<<>>>><<<><<<>>>><<<<>>><<><<>>><<>>>><>>>><<<<>>><<>>>><<>><<<<>>><<<<><<<><><<<>>><<<<><<<<>>><<<>><<><>>><<<>><<><<<>>>><<<<><<<>>>><<<>>><<><>>>><>><<<>><<<<>>><<<<><<<<>>><<>>>><<><>>><<<>>>><><><<<<>>><<<>>><>>><<<><<<>>><<<><><<<<>>>><>><>>><<<<>><><<>>>><<<>><<<>>>><<<<>><<<><<>>>><>>>><<<>><<<<>><<<<>><>><<<>>>><><<><<><<<><>>><>><<><<>><<<><<<<><<<<>>>><>>>><<<<>>>><<<>><<<>><<>>>><<<>>><<>><<<>>><<>>><<>>>><<<>><<<>>><<<<><<>><>><>><<>>><<><>><<<>>>><<><<>>><<<<><<><<<>>><<<>>><<<>><<<>>>><<>>>><<<<><<>><<<>>><>>><<>><<<><<<><<>>>><>>><<<>><<<<><>><<<<>>>><<<>><<>><<><<>>><><<><>><<<<>>><<>>>><>>><<<>><>><<<><<><<<<>><<<<>><<>>>><<<>>><<<<>>><<<>>><<<><<<<><<<<><<<<>>>><<>>>><<<<>><>>><<<>>><<<<>>><>><<<<>>><<<<>>><><<<<>>>><<<><<<>><<>><>><<><>>>><<<>>>><<<<>><<<>>>><<>>>><<<<><<><<>><<<<>>>><<<<>>>><<<<>>><<<<><<<><>>>><<<<>>>><><<<<>>>><><<<><<>>>><>>><<<<>><>>>><>>>><<<<>>>><<<>><<<>>><<>>>><<<>><>>><<<>><<<<>>>><<<><<>>><<<>>><<>>>><>>><>>>><<<<>>><>><><>>>><><>>>><<>>><><<<<>>>><>><<>>><<<>><<>>>><>><<>><<<>><<<<>>><<<<>>><<<<>>><><<<<>><<><<>><>><<<<>><<><>>><<<>>>><>><<<><<<>><<<<><>>><<<>>><<<<>><<><<<<>>><>>><>>><<>>><<<<>>><<<><<<>>><<<><<<>>>><>>>><<>>>><><<>>>><<>>>><<<<>>>><>>><<<<>><<>>><<><<<<><<<>>><>>>><<<>><<><>><<<>>>><>>>><<<><<>>>><<<<>><<>>>><>>>><<<>>><<<<><<<><<<<><<<<><<<<>><<<>>><<<>><<>>><>>><>>>><<<<>>><<<<>><<<<>><<>><>><<<<><><<><<<>>>><<<><>><<<<>><<<<>>>><<<<>>>><<>>>><<<<>>>><<<<><<<<>><<<>>><<>>>><>>><<<>>><<<>>><<>>>><<>>>><<>><<<>><<>><<<>><<>>><<>>>><>><>><<<<>>><<>><>><<>>>><>>>><<>><<<<>><<<><<>><<<<>>><<<<><<<>>>><<<<><<<>>>><<<>>><<<<>><<<><<<<><<<<>>>><>>>><<>>>><<<>>>><<<<><<><>>>><>><>>><<<>><>>>><>><><<>>><><<>><><<<>><<<>>>><<<>><<<>>>><<<>>>><>><>><<<>>>><><<<<>><<><>><<>>>><<<>>><<<<><<>>><<<<>>>><<>>>><>>>><<>>>><<<>>>><>>>><>><<<<>>><<<<>>><<<<>><<<<>><<<>>><<<>>>><>><>>><<<>><>>><<<><<>>><<>><><<<<>>><><<>>><<><>>><>>><<<<>><<><>>>><<>>><<>>><<<>><<<<>><<>>><<<>>>><<<<>>>><<>>><<>><<<<><<<>>>><<>>><>>><<<>>>><<<>><<<><>>><>>><<<><<>>>><<<<>>><<<><<<>>><<<<><<<>>><<<<>>><<<<>><<<<>><<>>><<<>>>><<<<>>>><<>><<<<>><>><<>><<<>>>><<><><<>><>><<><<>>>><<<><<<<>>><<<><>><<>>><<<<>><<<>><<<<>>><>><><<<>>><><<<<>>>><<<><<<<>>><<<<>><<<><><<<<>>><<>><>>>><<>>><<<<><<>><>><<>>><<><<<<>>>><<><<<>>><<>>>><<<>>>><>>><<<>>><<>><<<<>><>>><<><<<><>>>><>>>><<<<>>>><<<>><<<<>>><<<>>>><<<<><<>>><<<<>><<<><><>>>><<><<>>>><>>>><<><<<>>><<<<><<<<>>><>>><<<>><<>>><>>><<<>>><<<<>>>><<<><>><<<>>><<>>>><>>>><>>>><<<<>>><>><<>>>><>>><<<>>>><><<>>>><<<><<<<>><><<<<>>><><<>><>>>><<>><<<<>>><>><>><>>><<>>><<>>>><><>><<>>>><<<><<<>>><>>><<<<>><<>>>><<<<>>>><<<<>><<<<>>><<>><<>>>><>>>><>>>><><<<><<<<>>><><<><>>>><<<<>><<>><<<>><<<<>>>><<<><<<<>>>><<<>>><<<<>>><>>>><<<<>><<>>><>>><<>>>><<<<>><<<><<<>>>><><<<><<>><<<>>>><<>><<<<>>>><>><<<<>>><<>>><><>>><>><<<>><>><>>>><<<<>><<<>>><<<><<<<>>><<<>>>><<>>>><<><<<<>>><<<<><<<<>><>><<>>><<<<>>><<<>>><<<>>>><<<<>>>><<<>>><<<><<<<><<<>>>><<<<>>>><<<<>>><>>><<<>>><<<<>><<>><<<>><<<>>><<<<>>><<><<<>><<<>>>><<<<>>>><<<<>><<>>>><<<<>>><<>>>><<<<>>><<<<>>>><>>><<<<>>>><<<>>>><<><<<>><<>>><><>>><<><>>>><<<<><<><<<<>>>><<>>>><>>>><<<<><<>>>><<<<><<<<>>><<<>>>><<>>>><>>><><<<<><<<<>>>><>>>><<><<<><>>>><><><<>>>><>>>><>>>><><<<>><<<>>>><<>><<>>>><<><<><<<>>><<<>>>><<>><<<>>>><>>><<<><<<<>>><>>><<<<>>><<><<>>>><<<>><<><<<>>>><<<<>><<<<>>>><<><<><<<>>>><>><<<>><<>>>><<<<>>><<<>>><<<>>><>>><><<<>>><<<>>><<<>><<<<>>>><><<<>>>><<>>><<>>>><>>>><>><>>><>>>><<<><<<<>>><<>><<><<<>>>><<<>>><<><<<>>><<>>>><>><><<>>>><><>><>>>><<>><<<<>><<>>>><>>>><><>>>><<<<>>>><<<<>>>><<>>><<<>><<<<>>><>>><<<<>><<>>><<<<><<<>><<<<>>><<<>>><>><>>><<<<>>>><<<<>><<<>>>><>>><<>>><>>>><<<>><<<>>>><><<<>>>><<<>>>><<<<>>>><<><<><<<>><>>><<<<>>>><<<<>>>><<>>>><<<><<>><>>>><<<<>>><>>>><<<<>><<<>><<>>><<>>>><<>>><><<<<>>><<>>>><<<><<><<>><>><<<>>>><>><<<>>><><>>>><>>><>>>><<<<><<<<>>>><<<<><<<<><<<>>><<<<><<<<>>><<<<>>><<<>>>><<<<>>>><<>>><<>>><<<><<>>><<<<>>><>><<<>>>><<<>><<<<>><<>>><>>><<<>><<<>>>><><<<><<><<>><>>>><<<>><<<><<>>><<<>>>><><<<>><<<>>><<>>><>>><<<<><<<><>>><<<>>>><>><<<<>>>><>>>><><<>>><>><>><<<<><<<>>><<<><<<>>><<<>>><<<<><<>>><<<><<<><<<<><>>><<>>>><<>>>><<>>><<<>>>><<><>><<<><<<<><<>>>><<<<>>>><>>>><<<>><>>>><<<><<>><><<<<><><<<<><>>><<>>>><<<>><>>>><<><><<<<>><<<>>>><<>>>><<<<>><<<<>><<<>><<<><<<<><<><<<>>><>>><<>><<<>><<<>>><>>>><><><<<<>><<><>><<<<>>>><<<<><<<<>>><>>><<<>>><<<><<<><<>><>><<<>><<><<<<>>>><<<>>>><<<>>>><<>>><<><>>><><>>><<<<><<<><<<>>>><<<<>>>><<<<>>>><>><<<><><><<<>>><<<><<<>><<>>>><<<><<<<>>><><<<>>>><>><<<<>>><<<<>>><>>>><<<>>><<<<>><<>><<<<>><<<><>>><<<<>><>><<<><<>><<<>>><<<<>>>><<>><<<>>>><<>><<<><<<<>>><<>>>><><>>>><<>>>><<<<>><>><<>>><<>>><<><<>>>><<<><<<>><><<<>>><<<>>>><<>><>>>><<>><<<<>>><<<><<<><<<><<<>>><<<>><<<>><><><>><<>>>><<<<>>>><<>><<>><<<><<<<>>>><<<<><>><>><>><<<><<<>>>><>><>>>><><<<<><><<<<><<>><<>>>><<<<>>><<<>>><<<<>><<<<><>>>><<>>><<<>>>><>>><<>>><<<>>><<<>><<>>>><<<><<<<>><>><><<<<>>><<>>><<>>><<><<<><<<<>><>><<>><><<<><<><<<<>>><<<<>><<<><<<><<>>>><<><>>><<>>><>>><<>><<>><<<<>>><<<<>>>><>>><>><<<<>>>><<<>><<<<>><<<><<><<<<><<><<<<><>>><<<>>>><<<<><<<>>><>>>><<<<>>>><<<<><<<><><>>>><><<<<>>>><>><>>><>>>><>>><<>><<>>>><<<>>>><<>><><<<><<<><<<><>>>><<<>>>><<<<>>>><>>>><>>>><<>>><<<>>>><<<><<<<>><<<<>>>><<<>>>><<<>><<<><<<><<>>>><<<<><><<<>><<<><>>><<<>><>><<<<>>>><>><<>><<><>><<<>>>><>>><<<>>><<<<>>>><>>>><<>><>>>><>>>><<<>><>>><>>><<>>><<<<><<>>><<<<><<<<><<><<<<>>>><>>>><<<<>>>><<<>>>><<<<>>>><>>>><<<>>>><<<>>><>>>><<<<><<<<>><<<><<>>><<<<><<>>><<>>>><<<>>><<<>>><<>>><>>><<>><<>>>><<<<><<<<>>>><<<>><<<<>>>><>>><<<>>><>>><<>>>><<<>>><<<>><<>><<<>>>><>><<><<>>><>><>>><<<<>>>><<<<>><>><<>><>>><<<<>>><<<<>>>><><<<>>>><<<<>>><<<<>><>>><<>><>><>><<>>><<>>><<<>>>><><<<<>>>><<<>><<<<>>><<<<><><<<<><<>><<<<>><>><<<<>><<>><>>><<>><<>>>><<<>><<<>>>><<<>>><<<>>><<>>><<<<><<>>><<>><<<<>>>><<<<>>>><<<<>>>><<"
